drop table if exists compilations_events;
drop table if exists compilations;
drop table if exists participation;
drop table if exists rates;
drop table if exists events;
drop table if exists categories;
drop table if exists users;

create table if not exists users
(
    id     bigint generated by default as identity primary key,
    "name" varchar(30) not null,
    email  varchar(50) not null unique
);

create table if not exists categories
(
    id     bigint generated by default as identity primary key,
    "name" varchar(20) not null unique
);

create table if not exists events
(
    id                bigint generated by default as identity primary key,
    annotation        varchar(2000) not null,
    created_on        timestamp     not null,
    description       varchar(7000) not null,
    event_date        timestamp     not null,
    latitude          real          not null,
    longitude         real          not null,
    paid              boolean       not null,
    participant_limit integer,
    published_on      timestamp,
    req_moderation    boolean,
    state             varchar(30)   not null,
    title             varchar(120)  not null,
    views             bigint,
    category_id       bigint        not null references categories (id) on delete restrict,
    initiator_id      bigint        not null references users (id) on delete cascade
);

create table if not exists participation
(
    id           bigint generated by default as identity primary key,
    created      timestamp   not null,
    status       varchar(20) not null,
    event_id     bigint      not null references events (id) on delete cascade,
    requester_id bigint      not null references users (id) on delete cascade,
    unique (requester_id, event_id)
);

create table if not exists compilations
(
    id     bigint generated by default as identity primary key,
    pinned boolean      not null,
    title  varchar(255) not null
);

create table if not exists compilations_events
(
    compilation_id bigint not null references compilations (id),
    event_id       bigint not null references events (id)
);

create table if not exists rates
(
    id           bigint generated by default as identity primary key,
    event_id     bigint not null references events (id) on delete cascade,
    initiator_id bigint not null references users (id) on delete cascade,
    is_positive  boolean,
    unique (initiator_id, event_id)
);

