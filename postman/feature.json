{
	"info": {
		"_postman_id": "4a307a08-100a-4ca3-a09d-1242d61d9d57",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23155877"
	},
	"item": [
		{
			"name": "like from user 1 to event 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "like from user 1 to event 34 repeatable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "del like from user 1 to event 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "like from user 3 to event 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "dislike from user 1 to event 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=False",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "False"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "dislike from user 2 to event 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=False",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "False"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "like from user 1 to event 35",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "like from user 2 to event 35",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "like from user 3 to event 35",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=True",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "True"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						},
						{
							"key": "eventId",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "dislike from user 4 to event 35",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId/ratings?isPositive=False",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"ratings"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "False"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "4"
						},
						{
							"key": "eventId",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get public event ful by id 34",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test event\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql('PUBLISHED');",
							"    pm.expect(jsonData.rating.rating).to.eql(33);",
							"    pm.expect(jsonData.rating.likes).to.eql(1);",
							"    pm.expect(jsonData.rating.dislikes).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "34"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get public event ful by id 35",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test event\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql('PUBLISHED');",
							"    pm.expect(jsonData.rating.rating).to.eql(75);",
							"    pm.expect(jsonData.rating.likes).to.eql(3);",
							"    pm.expect(jsonData.rating.dislikes).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "35"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get public events with filters and sorts by rank",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"test events on ranking\", function () {\r",
							"    pm.expect(pm.response.json()[0].rating.rating).to.eql(75);\r",
							"    pm.expect(pm.response.json()[1].rating.rating).to.eql(33);\r",
							"    pm.expect(pm.response.json()[2].rating.rating).to.eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/events?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=LIKES&from=0&size=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом аннотации и подробном описании события",
							"disabled": true
						},
						{
							"key": "categories",
							"value": "0",
							"description": "список идентификаторов категорий в которых будет вестись поиск",
							"disabled": true
						},
						{
							"key": "paid",
							"value": "true",
							"description": "поиск только платных/бесплатных событий",
							"disabled": true
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "onlyAvailable",
							"value": "false",
							"description": "только события у которых не исчерпан лимит запросов на участие"
						},
						{
							"key": "sort",
							"value": "LIKES",
							"description": "ranking sort"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "get rating for author 60",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test event\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rating).to.eql(33);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/ratings/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"ratings",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "60"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get rating for author 61",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test event\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rating).to.eql(75);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/ratings/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"ratings",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "61"
						}
					]
				}
			},
			"response": []
		}
	]
}